openapi: 3.1.0
info:
  title: Notion API
  version: "1"
servers:
  - url: https://api.notion.com/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters: {}
  schemas:
    DatabaseQueryFilterCondition:
      type: object
      properties:
        property:
          type: string
        title:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
            contains:
              type: string
            does_not_contain:
              type: string
            starts_with:
              type: string
            ends_with:
              type: string
        timestamp:
          type: string
          description: A constant string representing the type of timestamp to use as a filter.
          enum:
            - created_time
            - last_edited_time
        created_time:
          type: object
          properties:
            equals:
              type: string
              format: date
            before:
              type: string
              format: date
            after:
              type: string
              format: date
            on_or_before:
              type: string
              format: date
            on_or_after:
              type: string
              format: date
        last_edited_time:
          type: object
          properties:
            equals:
              type: string
              format: date
            before:
              type: string
              format: date
            after:
              type: string
              format: date
            on_or_before:
              type: string
              format: date
            on_or_after:
              type: string
              format: date
        rich_text:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
            contains:
              type: string
            does_not_contain:
              type: string
            starts_with:
              type: string
            ends_with:
              type: string
        url:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
            contains:
              type: string
            does_not_contain:
              type: string
            starts_with:
              type: string
            ends_with:
              type: string
        email:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
            contains:
              type: string
            does_not_contain:
              type: string
            starts_with:
              type: string
            ends_with:
              type: string
        phone_number:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
            contains:
              type: string
            does_not_contain:
              type: string
            starts_with:
              type: string
            ends_with:
              type: string
        number:
          type: object
          properties:
            equals:
              type: number
            does_not_equal:
              type: number
            contains:
              type: number
            does_not_contain:
              type: number
            starts_with:
              type: number
            ends_with:
              type: number
        checkbox:
          type: object
          properties:
            equals:
              type: boolean
            does_not_equal:
              type: boolean
        select:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
        multi_select:
          type: object
          properties:
            contains:
              type: string
            does_not_contain:
              type: string
        status:
          type: object
          properties:
            equals:
              type: string
            does_not_equal:
              type: string
        date:
          type: object
          properties:
            equals:
              type: string
              format: date
            before:
              type: string
              format: date
            after:
              type: string
              format: date
            on_or_before:
              type: string
              format: date
            on_or_after:
              type: string
              format: date
    DatabaseQueryFilter:
      type: object
      description: When supplied, limits which pages are returned based on the filter conditions.
      properties:
        or:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseQueryFilterCondition'
          maxItems: 10
        and:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseQueryFilterCondition'
          maxItems: 10
security:
  - bearerAuth: []
paths:
  /databases/{database_id}/query:
    post:
      summary: Query a database
      description: ""
      operationId: post-database-query
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: database_id
          in: path
          description: Identifier for a Notion database.
          schema:
            type: string
          required: true
        - name: filter_properties
          in: query
          description: A list of page property value IDs associated with the database. Use this param to limit the response to a
            specific page property value or values for pages that meet the `filter` criteria.
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/DatabaseQueryFilter'
                sorts:
                  type: array
                  description: When supplied, orders the results based on the provided [sort criteria](ref:post-database-query-sort).
                  items:
                    type: object
                    required:
                      - property
                      - direction
                    properties:
                      property:
                        type: string
                      direction:
                        enum:
                          - ascending
                          - descending
                start_cursor:
                  type: string
                  description: When supplied, returns a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.
                page_size:
                  type: integer
                  description: "The number of items from the full list desired in the response. Maximum: 100"
                  default: 10
                  format: int32
                archived:
                  type: boolean
                in_trash:
                  type: boolean
      responses: {}
      deprecated: false
      security: []
  /search:
    post:
      summary: Search by title
      description: ""
      operationId: post-search
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The text that the API compares page and database titles against.
                sort:
                  type: object
                  description: A set of criteria, `direction` and `timestamp` keys, that orders the results. The **only** supported
                    timestamp value is `"last_edited_time"`. Supported `direction` values are `"ascending"` and
                    `"descending"`. If `sort` is not provided, then the most recently edited results are returned first.
                  properties:
                    direction:
                      type: string
                      description: The direction to sort. Possible values include `ascending` and `descending`.
                    timestamp:
                      type: string
                      description: The name of the timestamp to sort against. Possible values include `last_edited_time`.
                filter:
                  type: object
                  description: A set of criteria, `value` and `property` keys, that limits the results to either only pages or only
                    databases. Possible `value` values are `"page"` or `"database"`. The only supported `property` value
                    is `"object"`.
                  properties:
                    value:
                      type: string
                      description: "The value of the property to filter the results by.  Possible values for object type include `page` or
                        `database`.  **Limitation**: Currently the only filter allowed is `object` which will filter by
                        type of object (either `page` or `database`)"
                    property:
                      type: string
                      description: "The name of the property to filter by. Currently the only property you can filter by is the object
                        type.  Possible values include `object`.   Limitation: Currently the only filter allowed is
                        `object` which will filter by type of object (either `page` or `database`)"
                start_cursor:
                  type: string
                  description: A `cursor` value returned in a previous response that If supplied, limits the response to results starting
                    after the `cursor`. If not supplied, then the first page of results is returned. Refer to
                    [pagination](https://developers.notion.com/reference/intro#pagination) for more details.
                page_size:
                  type: integer
                  description: "The number of items from the full list to include in the response. Maximum: 100"
                  default: 10
                  format: int32
      responses: {}
      deprecated: false
      security: []
  /blocks/{block_id}/children:
    get:
      summary: Retrieve block children
      description: ""
      operationId: get-block-children
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: block_id
          in: path
          description: Identifier for a [block](ref:block)
          schema:
            type: string
          required: true
        - name: start_cursor
          in: query
          description: If supplied, this endpoint will return a page of results starting after the cursor provided. If not
            supplied, this endpoint will return the first page of results.
          schema:
            type: string
        - name: page_size
          in: query
          description: "The number of items from the full list desired in the response. Maximum: 100"
          schema:
            type: integer
            format: int32
            default: 100
      responses: {}
      deprecated: false
      security: []
    patch:
      summary: Append block children
      description: ""
      operationId: patch-block-children
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: block_id
          in: path
          description: Identifier for a [block](ref:block). Also accepts a [page](ref:page) ID.
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - children
              properties:
                children:
                  type: array
                  description: Child content to append to a container block as an array of [block objects](ref:block)
                  items:
                    type: object
                after:
                  type: string
                  description: The ID of the existing block that the new block should be appended after.
      responses: {}
      deprecated: false
      security: []
  /blocks/{block_id}:
    get:
      summary: Retrieve a block
      description: ""
      operationId: retrieve-a-block
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: block_id
          in: path
          description: Identifier for a Notion block
          schema:
            type: string
          required: true
      responses: {}
      deprecated: false
      security: []
    patch:
      summary: Update a block
      description: ""
      operationId: update-a-block
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: block_id
          in: path
          description: Identifier for a Notion block
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: object
                  description: The [block object `type`](ref:block#block-object-keys) value with the properties to be updated. Currently
                    only `text` (for supported block types) and `checked` (for `to_do` blocks) fields can be updated.
                  properties: {}
                archived:
                  type: boolean
                  description: Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.
                  default: true
      responses: {}
      deprecated: false
      security: []
    delete:
      summary: Delete a block
      description: ""
      operationId: delete-a-block
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: block_id
          in: path
          description: Identifier for a Notion block
          schema:
            type: string
          required: true
      responses: {}
      deprecated: false
      security: []
  /pages/{page_id}:
    get:
      summary: Retrieve a page
      description: ""
      operationId: retrieve-a-page
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: page_id
          in: path
          description: Identifier for a Notion page
          schema:
            type: string
          required: true
        - name: filter_properties
          in: query
          description: "A list of page property value IDs associated with the page. Use this param to limit the response to a
            specific page property value or values. To retrieve multiple properties, specify each page property ID. For
            example: `?filter_properties=iAk8&filter_properties=b7dh`."
          schema:
            type: string
      responses: {}
      deprecated: false
      security: []
    patch:
      summary: Update page properties
      description: ""
      operationId: patch-page
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: page_id
          in: path
          description: The identifier for the Notion page to be updated.
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  description: The property values to update for the page. The keys are the names or IDs of the property and the values
                    are property values. If a page property ID is not included, then it is not changed.
                  type: object
                  properties:
                    title:
                      type: array
                      items:
                        type: object
                        properties:
                          text:
                            type: object
                            properties:
                              content:
                                type: string
                                maxLength: 2000
                              link:
                                type:
                                  - object
                                  - "null"
                                properties:
                                  url:
                                    type: string
                                required:
                                  - url
                            additionalProperties: false
                            required:
                              - content
                          type:
                            enum:
                              - text
                        additionalProperties: false
                        required:
                          - text
                      maxItems: 100
                    type:
                      enum:
                        - title
                  additionalProperties: false
                  required:
                    - title
                in_trash:
                  type: boolean
                  description: Set to true to delete a block. Set to false to restore a block.
                  default: false
                archived:
                  type: boolean
                icon:
                  description: A page icon for the page. Supported types are [external file
                    object](https://developers.notion.com/reference/file-object) or [emoji
                    object](https://developers.notion.com/reference/emoji-object).
                  type: object
                  properties:
                    emoji:
                      type: string
                  additionalProperties: false
                  required:
                    - emoji
                cover:
                  type: object
                  description: A cover image for the page. Only [external file
                    objects](https://developers.notion.com/reference/file-object) are supported.
                  properties:
                    external:
                      type: object
                      properties:
                        url:
                          type: string
                      additionalProperties: false
                      required:
                        - url
                    type:
                      enum:
                        - external
                  required:
                    - external
                  additionalProperties: false
      responses: {}
      deprecated: false
      security: []
  /pages:
    post:
      summary: Create a page
      description: ""
      operationId: post-page
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - parent
                - properties
              properties:
                parent:
                  type: object
                  properties:
                    page_id:
                      type: string
                      format: uuid
                  required:
                    - page_id
                properties:
                  type: object
                  properties:
                    title:
                      type: array
                      items:
                        type: object
                        required:
                          - text
                        properties:
                          text:
                            type: object
                            required:
                              - content
                            properties:
                              content:
                                type: string
                                maxLength: 2000
                      maxItems: 100
                    type:
                      enum:
                        - title
                  additionalProperties: false
                  required:
                    - title
                children:
                  type: array
                  description: The content to be rendered on the new page, represented as an array of [block
                    objects](https://developers.notion.com/reference/block).
                  items:
                    type: string
                icon:
                  type: string
                  description: The icon of the new page. Either an [emoji object](https://developers.notion.com/reference/emoji-object) or
                    an [external file object](https://developers.notion.com/reference/file-object)..
                  format: json
                cover:
                  type: string
                  description: The cover image of the new page, represented as a [file
                    object](https://developers.notion.com/reference/file-object).
                  format: json
      responses: {}
      deprecated: false
      security: []
  /databases/{database_id}:
    get:
      summary: Retrieve a database
      description: ""
      operationId: retrieve-a-database
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: database_id
          in: path
          description: An identifier for the Notion database.
          schema:
            type: string
          required: true
      responses: {}
      deprecated: false
      security: []
  /pages/{page_id}/properties/{property_id}:
    get:
      summary: Retrieve a page property item
      description: ""
      operationId: retrieve-a-page-property
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: page_id
          in: path
          description: Identifier for a Notion page
          schema:
            type: string
          required: true
        - name: property_id
          in: path
          description: Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values)
          schema:
            type: string
          required: true
        - name: page_size
          in: query
          description: For paginated properties. The max number of property item objects on a page. The default size is 100
          schema:
            type: integer
            format: int32
        - name: start_cursor
          in: query
          description: For paginated properties.
          schema:
            type: string
      responses: {}
      deprecated: false
      security: []
  /comments:
    get:
      summary: Retrieve comments
      description: Retrieves a list of un-resolved [Comment objects](ref:comment-object) from a page or block.
      operationId: retrieve-comments
      x-openai-isConsequential: false
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
        - name: block_id
          in: query
          description: Identifier for a Notion block or page
          required: true
          schema:
            type: string
        - name: start_cursor
          in: query
          description: If supplied, this endpoint will return a page of results starting after the cursor provided. If not
            supplied, this endpoint will return the first page of results.
          schema:
            type: string
        - name: page_size
          in: query
          description: "The number of items from the full list desired in the response. Maximum: 100"
          schema:
            type: integer
            format: int32
      responses: {}
      deprecated: false
      security: []
    post:
      summary: Create comment
      description: Creates a comment in a page or existing discussion thread.
      operationId: create-a-comment
      parameters:
        - name: Notion-Version
          in: header
          required: true
          schema:
            type: string
          example: 2022-06-28
          constant: 2022-06-28
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - parent
                - rich_text
              properties:
                parent:
                  type: object
                  description: The page that contains the comment
                  required:
                    - page_id
                  properties:
                    page_id:
                      type: string
                      description: the page ID
                rich_text:
                  type: array
                  items:
                    type: object
                    required:
                      - text
                    properties:
                      text:
                        type: object
                        required:
                          - content
                        properties:
                          content:
                            type: string
                            description: The content of the comment
      responses: {}
      deprecated: false
      security: []
